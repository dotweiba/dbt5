#!/bin/sh
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2006      Open Source Development Labs, Inc.
#               2006      Rilson Nascimento.
#               2006-2014 Mark Wong
#               2014      2ndQuadrant, Ltd.
#

if [ $# -ne 1 ]; then
    echo "usage: `basename $0` <mix.log>"
    exit 1
fi

MIXFILE=$1

if [ ! -f "${MIXFILE}" ]; then
	echo "${MIXFILE} not found"
	exit 1
fi

R --slave --no-save << __EOF__
# Is there an escape error in pipe()? It shouldn't print the START marker line
# nor the TERMINATED line.
cmd <- "sed -n '/START/,/TERMINATED/{/START|TERMINATED/!p}' ${MIXFILE}"
df <- read.csv(pipe(cmd), header=F)
df <- df[-1,]
df <- df[-nrow(df),]

colnames(df)[1] <- 'ctime'
colnames(df)[2] <- 'txn'
colnames(df)[3] <- 'status'
colnames(df)[4] <- 'response'

sd <- 0
bv <- 1
cp <- 2
mw <- 3
ts <- 4
tl <- 5
to <- 6
tu <- 7
mf <- 8
tr <- 9
dm <- 10
tc <- 11

transaction_name <- c("Security Detail", "Broker Volume", "Customer Position",
                      "Market Watch", "Trade Status", "Trade Lookup",
                      "Trade Order", "Trade Update", "Market Feed",
                      "Trade Result", "Data Maintenance")

transaction_list <- c(sd, bv, cp, mw, ts, tl, to, tu, mf, tr, dm, tc)

# Get the ctime after the START marker and the ctime before the first
# TERMINATED marker.
start <- df[1,]\$ctime
total_txn <- nrow(df)
end <- df[total_txn:total_txn,]\$ctime

duration = end - start

# Don't count the Data Maintenance transaction towards the total.
total_transaction_count <- nrow(subset(df, df\$txn != dm))

cat('                          Response Time\n')
cat('                            (seconds)\n')
cat(paste('Transaction       Mix %   Average:90th %  Total   Rollbacks    % ',
          'Warning Invalid\n', sep=""))
cat(paste('----------------- ------- --------------- ------- -------------- ',
          '------- -------\n', sep=""))

for (key in 1:length(transaction_list) - 1) {
  dataframe = subset(df, df\$txn == key - 1)
  transaction_count <- nrow(dataframe)
  if (transaction_count == 0) {
    rollback_count <- 0
    invalid_count <- 0
    warning_count <- 0
    per90 <- 0
    average_rt <- 0
    mix_percentage <- 0
    rollback_percentage <- 0
  } else {
    rollback_count <- nrow(subset(dataframe, dataframe\$status == 1))
    invalid_count <- nrow(subset(dataframe, dataframe\$status < 0))
    warning_count <- nrow(subset(dataframe, dataframe\$status > 1))
    per90 <- quantile(dataframe\$response, .9)
    average_rt <- mean(dataframe\$response)
    mix_percentage <- (transaction_count - rollback_count) /
                      total_transaction_count * 100.0
    rollback_percentage <- rollback_count / transaction_count * 100.0
  }
  if ((key - 1) == tr) {
    transaction_count_tr <- transaction_count
    rollback_count_tr <- rollback_count
  }
  if ((key - 1) == dm) {
    cat(sprintf("%-17s     N/A %7.3f:%7.3f %7d %6d %6.2f%% %7d %7d\n",
                transaction_name[key],
                average_rt,
                per90,
                transaction_count,
                rollback_count,
                rollback_percentage,
                warning_count,
                invalid_count))
  } else {
    cat(sprintf("%-17s %7.3f %7.3f:%7.3f %7d %6d %6.2f%% %7d %7d\n",
                transaction_name[key],
                mix_percentage,
                average_rt,
                per90,
                transaction_count,
                rollback_count,
                rollback_percentage,
                warning_count,
                invalid_count))
  }
}
cat(paste('----------------- ------- --------------- ------- -------------- ',
          '------- -------\n', sep=""))
cat(sprintf("%0.2f trade-result transactions per second (trtps)\n",
        (transaction_count_tr - rollback_count_tr) / duration))
cmd <- "head ${MIXFILE}"
df <- read.csv(pipe(cmd), header=F)
colnames(df)[1] <- 'ctime'
cat(sprintf("%0.1f minute(s) to ramp up\n",
        (start - df[1,]\$ctime) / 60.0))
cat(sprintf("%0.1f minute steady state duration\n", (duration / 60.0)))
__EOF__
